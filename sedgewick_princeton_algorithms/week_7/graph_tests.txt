# test cases for graphs


####### CREATE GRAPH ########

# graph = Graph()

# for i in range(0, 11):
#   graph.add_vertex(i, str(i) * 3)

# graph.add_edge(1, 2)
# graph.add_edge(1, 4)
# graph.add_edge(1, 3)
# graph.add_edge(2, 7)
# graph.add_edge(4, 5)
# graph.add_edge(3, 10)
# graph.add_edge(7, 8)
# graph.add_edge(7, 6)
# graph.add_edge(6, 9)

# graph.display()





########## DFS #############

# graph = Graph()

# for i in range(0, 11):
#   graph.add_vertex(i, str(i) * 3)

# graph.add_edge(1, 2)
# graph.add_edge(1, 4)
# graph.add_edge(1, 3)
# graph.add_edge(2, 7)
# graph.add_edge(4, 5)
# graph.add_edge(3, 10)
# graph.add_edge(7, 8)
# graph.add_edge(7, 6)
# graph.add_edge(6, 9)
# graph.add_edge(4, 7)
# graph.display()

dfs = DFS(graph)
dfs.dfs(1)
dfs.get_path(8)




########## BFS ############


# graph = Graph()

# for i in range(0, 11):
#   graph.add_vertex(i, str(i) * 3)

# graph.add_edge(1, 2)
# graph.add_edge(1, 4)
# graph.add_edge(1, 3)
# graph.add_edge(2, 7)
# graph.add_edge(4, 5)
# graph.add_edge(3, 10)
# graph.add_edge(7, 8)
# graph.add_edge(7, 6)
# graph.add_edge(6, 9)
# graph.add_edge(5, 6)
# graph.add_edge(4, 7)

# bfs = BFS(graph)
# bfs.bfs(1)
# bfs.shortest_path(7)



##### CONNECTED COMPONENTS ####

graph = Graph()

for i in range(1, 17):
  graph.add_vertex(i, str(i) * 3)

graph.add_edge(1, 2)
graph.add_edge(1, 4)
graph.add_edge(1, 3)
graph.add_edge(2, 7)
graph.add_edge(4, 5)
graph.add_edge(3, 10)
graph.add_edge(7, 8)
graph.add_edge(7, 6)
graph.add_edge(6, 9)
graph.add_edge(4, 7)
graph.add_edge(11, 13)
graph.add_edge(11, 14)
graph.add_edge(15, 16)
graph.display()

cc = ConnectedComponents(graph)
cc.find_connected_components()
cc.get_components(2)
cc.is_connected(2, 11)


##### FIND EULER TOUR #####


for i in range(1, 7):
  graph.add_vertex(i, str(i) * 3)

# has path, two odd nodes
# graph.add_edge(1, 2)
# graph.add_edge(2, 3)
# graph.add_edge(2, 4)
# graph.add_edge(3, 5)
# graph.add_edge(4, 5)
# graph.add_edge(5, 2)
# graph.add_edge(5, 6)

# has path, no odd nodes
graph.add_edge(1, 2)
graph.add_edge(1, 4)
graph.add_edge(1, 3)
graph.add_edge(3, 2)
graph.add_edge(3, 4)

# straightforward square circuit
# graph.add_edge(1,2)
# graph.add_edge(2,3)
# graph.add_edge(3,4)
# graph.add_edge(4,1)

##### DOES GRAPH CONTAIN CYCLE ####


graph = Graph()

for i in range(1, 17):
  graph.add_vertex(i, str(i) * 3)

graph.add_edge(1, 2)
graph.add_edge(1, 4)
graph.add_edge(1, 3)
graph.add_edge(2, 7)
graph.add_edge(4, 5)
graph.add_edge(3, 10)
graph.add_edge(7, 8)
graph.add_edge(7, 6)
graph.add_edge(6, 9)
graph.add_edge(4, 7)
graph.add_edge(11, 13)
graph.add_edge(11, 14)
graph.add_edge(15, 16)
graph.add_edge(1, 2)
graph.display()



#### TOPOLOGICAL SORT ####

dg = DirectedGraph()

for i in range(0, 7):
  dg.add_vertex(i, "Class %d" % (i))

dg.add_edge(0, 1)
dg.add_edge(0, 5)
dg.add_edge(0, 2)
dg.add_edge(1, 4)
dg.add_edge(5, 2)
dg.add_edge(3, 5)
dg.add_edge(3, 4)
dg.add_edge(3, 6)
dg.add_edge(6, 4)
dg.add_edge(6, 0)

# add edge to make it cycle. This should break it
dg.add_edge(4, 6)


print(dg.display())

ts = TopologicalSort(dg)
print(ts.topological_sort())


